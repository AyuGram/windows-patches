Subject: [PATCH] feat: implement read buttons
---
Index: Telegram/SourceFiles/window/window_peer_menu.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Telegram/SourceFiles/window/window_peer_menu.h b/Telegram/SourceFiles/window/window_peer_menu.h
--- a/Telegram/SourceFiles/window/window_peer_menu.h	(revision 57c01bbfb18ce0a63fe86d7e998f4a9ad7356915)
+++ b/Telegram/SourceFiles/window/window_peer_menu.h	(date 1683717801064)
@@ -177,4 +177,6 @@
 
 void AddSeparatorAndShiftUp(const PeerMenuCallback &addAction);
 
+void MarkAsReadChatListHack(not_null<Dialogs::MainList*> list);
+
 } // namespace Window
Index: Telegram/SourceFiles/window/window_peer_menu.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Telegram/SourceFiles/window/window_peer_menu.cpp b/Telegram/SourceFiles/window/window_peer_menu.cpp
--- a/Telegram/SourceFiles/window/window_peer_menu.cpp	(revision 57c01bbfb18ce0a63fe86d7e998f4a9ad7356915)
+++ b/Telegram/SourceFiles/window/window_peer_menu.cpp	(date 1684484192820)
@@ -103,6 +103,11 @@
 #include <api/api_text_entities.h>
 #include <history/view/history_view_pinned_section.h>
 
+
+// AyuGram includes
+#include "history/history_unread_things.h"
+
+
 namespace Window {
 namespace {
 
@@ -1369,6 +1374,11 @@
 
 } // namespace
 
+// I hate C++ actually
+void MarkAsReadChatListHack(not_null<Dialogs::MainList*> list) {
+    MarkAsReadChatList(list);
+}
+
 void PeerMenuHidePinnedMessage(not_null<PeerData*> peer) {
 	auto hidden = HistoryWidget::switchPinnedHidden(peer, true);
 	if (hidden) {
@@ -2718,12 +2728,69 @@
 }
 
 bool IsUnreadThread(not_null<Data::Thread*> thread) {
-	return thread->chatListBadgesState().unread;
+	return thread->chatListBadgesState().unread || thread->unreadMentions().has() || thread->unreadReactions().has();
 }
 
 void MarkAsReadThread(not_null<Data::Thread*> thread) {
+    // shamefully copied from "menu_send.cpp"
+    const auto processMentions = [=](
+            base::weak_ptr<Data::Thread> weakThread,
+            auto resend) -> void {
+        const auto thread = weakThread.get();
+        if (!thread) {
+            return;
+        }
+        const auto peer = thread->peer();
+        const auto topic = thread->asTopic();
+        const auto rootId = topic ? topic->rootId() : 0;
+        using Flag = MTPmessages_ReadMentions::Flag;
+        peer->session().api().request(MTPmessages_ReadMentions(
+                MTP_flags(rootId ? Flag::f_top_msg_id : Flag()),
+                peer->input,
+                MTP_int(rootId)
+        )).done([=](const MTPmessages_AffectedHistory &result) {
+            const auto offset = peer->session().api().applyAffectedHistory(
+                    peer,
+                    result);
+            if (offset > 0) {
+                resend(weakThread, resend);
+            } else {
+                peer->owner().history(peer)->clearUnreadMentionsFor(rootId);
+            }
+        }).send();
+    };
+
+    const auto processReactions = [=](
+            base::weak_ptr<Data::Thread> weakThread,
+            auto resend) -> void {
+        const auto thread = weakThread.get();
+        if (!thread) {
+            return;
+        }
+        const auto topic = thread->asTopic();
+        const auto peer = thread->peer();
+        const auto rootId = topic ? topic->rootId() : 0;
+        using Flag = MTPmessages_ReadReactions::Flag;
+        peer->session().api().request(MTPmessages_ReadReactions(
+                MTP_flags(rootId ? Flag::f_top_msg_id : Flag(0)),
+                peer->input,
+                MTP_int(rootId)
+        )).done([=](const MTPmessages_AffectedHistory &result) {
+            const auto offset = peer->session().api().applyAffectedHistory(
+                    peer,
+                    result);
+            if (offset > 0) {
+                resend(weakThread, resend);
+            } else {
+                peer->owner().history(peer)->clearUnreadReactionsFor(rootId);
+            }
+        }).send();
+    };
+
 	const auto readHistory = [&](not_null<History*> history) {
 		history->owner().histories().readInbox(history);
+        processMentions(base::make_weak(thread), processMentions);
+        processReactions(base::make_weak(thread), processReactions);
 	};
 	if (!IsUnreadThread(thread)) {
 		return;
Index: Telegram/SourceFiles/window/window_main_menu.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Telegram/SourceFiles/window/window_main_menu.cpp b/Telegram/SourceFiles/window/window_main_menu.cpp
--- a/Telegram/SourceFiles/window/window_main_menu.cpp	(revision 57c01bbfb18ce0a63fe86d7e998f4a9ad7356915)
+++ b/Telegram/SourceFiles/window/window_main_menu.cpp	(date 1683718691949)
@@ -76,6 +76,12 @@
 #include <QtGui/QGuiApplication>
 #include <QtGui/QClipboard>
 
+
+// AyuGram includes
+#include "history/history.h"
+#include "data/data_histories.h"
+
+
 namespace Window {
 namespace {
 
@@ -459,8 +465,8 @@
 	parentResized();
 
 	_telegram->setMarkedText(Ui::Text::Link(
-		u"64Gram Desktop"_q,
-		u"https://github.com/TDesktop-x64/tdesktop"_q));
+            u"AyuGram Desktop"_q,
+            u"https://radolyn.com"_q));
 	_telegram->setLinksTrusted();
 	_version->setMarkedText(
 		Ui::Text::Link(
@@ -766,6 +772,32 @@
 		)->setClickedCallback([=] {
 			controller->showPeerHistory(controller->session().user());
 		});
+        addAction(
+                rpl::single(QString("LRead Messages")),
+                { &st::settingsIconForward, kIconPurple }
+        )->setClickedCallback([=] {
+            const auto settings = &Core::App().settings();
+            const auto prev = settings->sendReadPackets();
+            settings->setSendReadPackets(false);
+
+            auto chats = controller->session().data().chatsList();
+            MarkAsReadChatListHack(chats);
+
+            settings->setSendReadPackets(prev);
+        });
+        addAction(
+                rpl::single(QString("SRead Messages")),
+                { &st::settingsIconForward, kIconPurple }
+        )->setClickedCallback([=] {
+            const auto settings = &Core::App().settings();
+            const auto prev = settings->sendReadPackets();
+            settings->setSendReadPackets(true);
+
+            auto chats = controller->session().data().chatsList();
+            MarkAsReadChatListHack(chats);
+
+            settings->setSendReadPackets(prev);
+        });
 	} else {
 		addAction(
 			tr::lng_profile_add_contact(),
